// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

// Import the inherited roles.
import "../coffeecore/Ownable.sol";
import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";

// Create a contract 'Supplychain'
contract SupplyChain is
    Ownable,
    FarmerRole,
    ConsumerRole,
    RetailerRole,
    DistributorRole
{
    address contractOwner;

    // 'upc' for Universal Product Code (UPC)
    uint256 public upc;

    // 'sku' for Stock Keeping Unit (SKU)
    uint256 public sku;

    // list to store UPCs of items available for distributor
    uint256[] public forSaleItemsList;

    // list to store UPCs of items available for retailers
    uint256[] public shippedItemsList;

    // list to store UPCs of items mavailable for consumers
    uint256[] public availableForPurchaseList;

    mapping(uint256 => Item) items;

    mapping(uint256 => string[]) itemsHistory;

    // enum 'State' with the following values:
    enum State {
        Harvested,
        Processed,
        Packed,
        ForSale,
        Sold,
        Shipped,
        Received,
        Purchased
    }

    State constant defaultState = State.Harvested;

    struct Item {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation; // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude; // Farm Longitude
        uint256 productID; // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint256 productPrice; // Product Price
        State itemState; // Product State as represented in the enum above
        address distributorID; // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
    }

    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event Harvested(uint256 upc);
    event Processed(uint256 upc);
    event Packed(uint256 upc);
    event ForSale(uint256 upc);
    event Sold(uint256 upc);
    event Shipped(uint256 upc);
    event Received(uint256 upc);
    event Purchased(uint256 upc);

    // Modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(msg.sender == _address);
        _;
    }

    // Modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint256 _price) {
        require(msg.value >= _price);
        _;
    }

    // Modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint256 _upc) {
        _;
        uint256 _price = items[_upc].productPrice;
        uint256 amountToReturn = msg.value - _price;
        address payable consumer = payable(items[_upc].consumerID);
        consumer.transfer(amountToReturn);
    }

    // Modifier that checks if an item.state of a upc is Harvested
    modifier harvested(uint256 _upc) {
        require(items[_upc].itemState == State.Harvested);
        _;
    }

    // Modifier that checks if an item.state of a upc is Processed
    modifier processed(uint256 _upc) {
        require(items[_upc].itemState == State.Processed);
        _;
    }

    // Modifier that checks if an item.state of a upc is Packed
    modifier packed(uint256 _upc) {
        require(items[_upc].itemState == State.Packed);
        _;
    }

    // Modifier that checks if an item.state of a upc is ForSale
    modifier forSale(uint256 _upc) {
        require(items[_upc].itemState == State.ForSale);
        _;
    }

    // Modifier that checks if an item.state of a upc is Sold
    modifier sold(uint256 _upc) {
        require(items[_upc].itemState == State.Sold);
        _;
    }

    // Modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint256 _upc) {
        require(items[_upc].itemState == State.Shipped);
        _;
    }

    // Modifier that checks if an item.state of a upc is Received
    modifier received(uint256 _upc) {
        require(items[_upc].itemState == State.Received);
        _;
    }

    // Modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint256 _upc) {
        require(items[_upc].itemState == State.Purchased);
        _;
    }

    // Set 'ownerID' to the address that instantiated the contract and set 'sku', 'upc' to 1
    constructor() payable {
        contractOwner = msg.sender;
        sku = uint256(1);
        upc = uint256(1);
    }

    function destroy() public payable onlyOwner {
        // Use the payable function to convert an address to an address payable
        address payable payableOwner = payable(contractOwner);
        // Use the destroy function to delete the contract and send Ether to the owner
        destroy();
    }

    // Function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function harvestItem(
        uint256 _upc,
        address _originFarmerID,
        string memory _originFarmName,
        string memory _originFarmInformation,
        string memory _originFarmLatitude,
        string memory _originFarmLongitude,
        string memory _productNotes
    )
        public

        onlyFarmer
    {
        // Add the new item as part of Harvest
        Item storage item = items[_upc];
        item.upc = _upc;
        item.originFarmerID = _originFarmerID;
        item.ownerID = _originFarmerID;
        item.originFarmName = _originFarmName;
        item.originFarmInformation = _originFarmInformation;
        item.originFarmLatitude = _originFarmLatitude;
        item.originFarmLongitude = _originFarmLongitude;
        item.productID = sku + upc;
        item.sku = sku;
        item.productNotes = _productNotes;
        item.itemState = State.Harvested;

        sku = sku + 1;

        emit Harvested(_upc);
    }

    // Function 'processItem' that allows a farmer to mark an item 'Processed'
    function processItem(uint256 _upc)
        public
        // Call modifier to check if upc has passed previous supply chain stage
        harvested(_upc)
        // Call modifier to verify caller of this function - only allow the original farmer to process.
        verifyCaller(items[_upc].originFarmerID)
    {
        // Update the appropriate fields
        Item storage item = items[_upc];
        item.itemState = State.Processed;

        emit Processed(_upc);
    }

    // Function 'packItem' that allows a farmer to mark an item 'Packed'
    function packItem(uint256 _upc)
        public
        // Call modifier to check if upc has passed previous supply chain stage
        processed(_upc)
        // Call modifier to verify caller of this function - only allow the original farmer to pack.
        verifyCaller(items[_upc].originFarmerID)
    {
        Item storage item = items[_upc];
        item.itemState = State.Packed;

        emit Packed(_upc);
    }

    // Function 'addToForSaleList' to add a UPC to the 'ForSale' list
    function addToForSaleList(uint256 _upc) internal {
        forSaleItemsList.push(_upc);
    }

    // Function 'removeFromForSaleList' to remove a UPC from the 'ForSale' list
    function removeFromForSaleList(uint256 _upc) internal {
        for (uint256 i = 0; i < forSaleItemsList.length; i++) {
            if (forSaleItemsList[i] == _upc) {
                forSaleItemsList[i] = forSaleItemsList[
                    forSaleItemsList.length - 1
                ];
                forSaleItemsList.pop();
                break;
            }
        }
    }

    // Function 'fetchForSaleItems' that allows a distributor to fetch items marked as 'ForSale' by farmers
    function fetchForSaleItems()
        public
        view
        onlyDistributor
        returns (uint256[] memory)
    {
        return forSaleItemsList;
    }

    // Function 'sellItem' that allows a farmer to mark an item 'ForSale'
    function sellItem(uint256 _upc, uint256 _price)
        public
        // Call modifier to check if upc has passed previous supply chain stage
        packed(_upc)
        // Call modifier to verify caller of this function - only allow the original farmer to put up for sale.
        verifyCaller(items[_upc].originFarmerID)
    {
        Item storage item = items[_upc];
        item.productPrice = _price;
        item.itemState = State.ForSale;

        addToForSaleList(_upc);

        emit ForSale(_upc);
    }

    // Function 'buyItem' that allows the distributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
    // and any excess ether sent is refunded back to the buyer
    function buyItem(uint256 _upc)
        public
        payable
        // Only allow configured distributors to buy.
        onlyDistributor
        // Call modifier to check if upc has passed previous supply chain stage
        forSale(_upc)
        // Call modifer to check if buyer has paid enough
        paidEnough(msg.value)
        // Call modifer to send any excess ether back to buyer
        checkValue(_upc)
    {
        // Update the appropriate fields - ownerID, distributorID, itemState
        Item storage item = items[_upc];
        item.distributorID = msg.sender;
        item.ownerID = msg.sender;
        item.itemState = State.Sold;

        // Remove from the 'ForSale' list
        removeFromForSaleList(_upc);

        // Transfer money to farmer (any extra will be refunded to the distributor via the checkValue modifier).
        address payable farmer = payable(item.originFarmerID);
        farmer.transfer(item.productPrice);

        emit Sold(_upc);
    }

    // Function 'addToShippedList' to add a UPC to the 'Shipped' list
    function addToShippedList(uint256 _upc) internal {
        shippedItemsList.push(_upc);
    }

    // Function 'removeFromShippedList' to remove a UPC from the 'Shipped' list
    function removeFromShippedList(uint256 _upc) internal {
        for (uint256 i = 0; i < shippedItemsList.length; i++) {
            if (shippedItemsList[i] == _upc) {
                shippedItemsList[i] = shippedItemsList[
                    shippedItemsList.length - 1
                ];
                shippedItemsList.pop();
                break;
            }
        }
    }

    // Function 'fetchForShippedItems' that allows a retailers to fetch items marked as 'ForShipped' by distributors
    function fecthForShippedItemsList()
        public
        view
        onlyRetailer
        returns (uint256[] memory)
    {
        return shippedItemsList;
    }

    // Function 'shipItem' that allows the distributor to mark an item 'Shipped'
    function shipItem(uint256 _upc)
        public
        // Call modifier to check if upc has passed previous supply chain stage
        sold(_upc)
        // Call modifier to verify caller of this function - only allow the designated distributor to ship.
        verifyCaller(items[_upc].distributorID)
    {
        Item storage item = items[_upc];
        item.itemState = State.Shipped;

        addToShippedList(_upc);

        emit Shipped(_upc);
    }

    // Function 'addToAvailableForPurchaseList' to add a UPC to the 'AvailableForPurchase' list
    function addToAvailableForPurchaseList(uint256 _upc) internal {
        availableForPurchaseList.push(_upc);
    }

    // Function 'removeFromAvailableForPurchaseList' to remove a UPC from the 'AvailableForPurchase' list
    function removeFromAvailableForPurchaseList(uint256 _upc) internal {
        for (uint256 i = 0; i < availableForPurchaseList.length; i++) {
            if (availableForPurchaseList[i] == _upc) {
                availableForPurchaseList[i] = availableForPurchaseList[
                    availableForPurchaseList.length - 1
                ];
                availableForPurchaseList.pop();
                break;
            }
        }
    }

    // Function 'fetchAvailableForPurchaseItems' that allows a consumer to fetch items available for purchase
    function fetchAvailableForPurchaseItems()
        public
        view
        onlyConsumer
        returns (uint256[] memory)
    {
        return availableForPurchaseList;
    }

    // Function 'receiveItem' that allows the retailer to mark an item 'Received'
    function receiveItem(uint256 _upc)
        public
        // Call modifier to check if upc has passed previous supply chain stage
        shipped(_upc)
        // Access Control List enforced by calling Smart Contract / DApp
        onlyRetailer
    {
        Item storage item = items[_upc];
        item.retailerID = msg.sender;
        item.ownerID = msg.sender;
        item.itemState = State.Received;

        removeFromShippedList(_upc);

        addToAvailableForPurchaseList(_upc);

        emit Received(_upc);
    }

    // Function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
    function purchaseItem(uint256 _upc)
        public
        // Call modifier to check if upc has passed previous supply chain stage
        received(_upc)
        // Access Control List enforced by calling Smart Contract / DApp
        onlyConsumer
    {
        Item storage item = items[_upc];
        item.consumerID = msg.sender;
        item.ownerID = msg.sender;
        item.itemState = State.Purchased;

        removeFromAvailableForPurchaseList(_upc);

        emit Purchased(_upc);
    }

    // Function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            address ownerID,
            address originFarmerID,
            string memory originFarmName,
            string memory originFarmInformation,
            string memory originFarmLatitude,
            string memory originFarmLongitude
        )
    {
        // Assign values to the 8 parameters
        Item storage item = items[_upc];

        itemSKU = item.sku;
        itemUPC = item.upc;
        ownerID = item.ownerID;
        originFarmerID = item.originFarmerID;
        originFarmName = item.originFarmName;
        originFarmInformation = item.originFarmInformation;
        originFarmLatitude = item.originFarmLatitude;
        originFarmLongitude = item.originFarmLongitude;

        return (
            itemSKU,
            itemUPC,
            ownerID,
            originFarmerID,
            originFarmName,
            originFarmInformation,
            originFarmLatitude,
            originFarmLongitude
        );
    }

    // Function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            uint256 productID,
            string memory productNotes,
            uint256 productPrice,
            uint256 itemState,
            address distributorID,
            address retailerID,
            address consumerID
        )
    {
        // Assign values to the 9 parameters
        Item storage item = items[_upc];

        itemSKU = item.sku;
        itemUPC = item.upc;
        productID = item.productID;
        productNotes = item.productNotes;
        productPrice = item.productPrice;
        itemState = uint256(item.itemState);
        distributorID = item.distributorID;
        retailerID = item.retailerID;
        consumerID = item.consumerID;

        return (
            itemSKU,
            itemUPC,
            productID,
            productNotes,
            productPrice,
            itemState,
            distributorID,
            retailerID,
            consumerID
        );
    }
}
